package main

import (
	"fmt"
	"sync"
	"time"
)

// worker - функция, которая обрабатывает значения из in и отправляет результат в out.
func worker(id int, in <-chan int, out chan<- int, wg *sync.WaitGroup) {
	defer wg.Done()

	for n := range in {
		fmt.Printf("Worker %d: обработка %d\n", id, n)
		time.Sleep(time.Second) // Представим, что обработка занимает время

		// Отправляем обработанное значение обратно
		out <- n * n // Представим, что обработка заключается в возведении в квадрат.
	}
}

// Fan-out – это шаблон конкурентности в программировании, особенно популярный в Go, который использует горутины и
// каналы для распределения задач между несколькими рабочими процессами (workers). Этот шаблон позволяет обработать задачи
// параллельно, что способствует увеличению пропускной способности и уменьшению времени выполнения программы.
//
// Ниже пример реализации шаблона "Распределение" (Fan Out) на языке Go. В этом примере, мы создадим несколько горутин
// (рабочих), которые будут обрабатывать числа из входного канала и отправлять результат обработки обратно через выходной канал.

// Как это работает:
//
// Создаем канал in для входных задач и канал out для выходных результатов.
// Запускаем несколько горутин (в роли рабочих), каждая из которых ждет задачи из канала in, обрабатывает их, и отправляет результаты в out.
// В главной горутине отправляем задачи в канал in, затем закрываем этот канал после отправки всех задач.
// Запускаем отдельную горутину для ожидания завершения всех рабочих с помощью sync.WaitGroup, после чего закрываем канал out.
// В главной горутине читаем результаты из канала out до его закрытия.
// Через использование горутин и каналов, мы успешно реализуем шаблон Fan-out для параллельной обработки данных в Go.
func main() {
	const numWorkers = 5 // Количество рабочих
	in := make(chan int)
	out := make(chan int)

	var wg sync.WaitGroup

	// Создаем рабочие горутины
	for i := 0; i < numWorkers; i++ {
		wg.Add(1)
		go worker(i, in, out, &wg)
	}

	// Отправка задач в канал in
	go func() {
		for i := 0; i < 10; i++ {
			in <- i
		}
		close(in) // Закрываем канал in после отправки всех задач
	}()

	// Закрываем канал out после завершения всех рабочих
	go func() {
		wg.Wait()
		close(out)
	}()

	// Получение результатов из канала out
	for result := range out {
		fmt.Printf("Результат: %d\n", result)
	}
}
